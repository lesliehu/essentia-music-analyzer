#!/usr/bin/env python3
"""
Telep√≠t√©s ellen≈ërz≈ë script az Essentia Music Analyzer sz√°m√°ra
"""
import sys
import os
import subprocess

def check_python_version():
    """Python verzi√≥ ellen≈ërz√©s"""
    version = sys.version_info
    print(f"üêç Python verzi√≥: {version.major}.{version.minor}.{version.micro}")
    
    if version.major != 3 or version.minor < 8:
        print("‚ùå Python 3.8+ sz√ºks√©ges!")
        return False
    else:
        print("‚úÖ Python verzi√≥ megfelel≈ë")
        return True

def check_imports():
    """F√ºgg≈ës√©gek ellen≈ërz√©se"""
    imports_to_check = {
        'essentia': 'essentia-tensorflow',
        'numpy': 'numpy', 
        'pandas': 'pandas',
        'tensorflow': 'tensorflow (essentia-tensorflow r√©sz√©ben)'
    }
    
    print("\nüì¶ F√ºgg≈ës√©gek ellen≈ërz√©se:")
    all_good = True
    
    for module, package in imports_to_check.items():
        try:
            if module == 'essentia':
                import essentia
                print(f"‚úÖ {module}: {essentia.__version__}")
            elif module == 'tensorflow':
                import tensorflow as tf
                print(f"‚úÖ {module}: {tf.__version__}")
            else:
                exec(f"import {module}")
                print(f"‚úÖ {module}: OK")
        except ImportError:
            print(f"‚ùå {module} hi√°nyzik (telep√≠t√©s: pip install {package})")
            all_good = False
    
    return all_good

def check_model_files():
    """Modell f√°jlok ellen≈ërz√©se"""
    print("\nü§ñ Modell f√°jlok ellen≈ërz√©se:")
    
    models_to_check = {
        'models/classifier_model.pb': (15 * 1024 * 1024, 20 * 1024 * 1024),  # 15-20MB
        'models/classifier_labels.json': (10 * 1024, 20 * 1024),  # 10-20KB
    }
    
    all_good = True
    
    for model_path, (min_size, max_size) in models_to_check.items():
        if os.path.exists(model_path):
            size = os.path.getsize(model_path)
            size_mb = size / (1024 * 1024)
            
            if min_size <= size <= max_size:
                print(f"‚úÖ {model_path}: {size_mb:.1f} MB")
            else:
                print(f"‚ö†Ô∏è {model_path}: {size_mb:.1f} MB (v√°rt: {min_size/(1024*1024):.1f}-{max_size/(1024*1024):.1f} MB)")
                if size < 1000:  # Ha t√∫l kicsi, val√≥sz√≠n≈±leg Git LFS probl√©ma
                    print(f"   üí° Futtasd: git lfs pull")
                all_good = False
        else:
            print(f"‚ùå {model_path}: nem tal√°lhat√≥")
            all_good = False
    
    return all_good

def check_git_lfs():
    """Git LFS ellen≈ërz√©s"""
    print("\nüì° Git LFS ellen≈ërz√©s:")
    
    try:
        result = subprocess.run(['git', 'lfs', 'version'], 
                              capture_output=True, text=True)
        if result.returncode == 0:
            print(f"‚úÖ Git LFS telep√≠tve: {result.stdout.strip()}")
            
            # LFS f√°jlok ellen≈ërz√©se
            result = subprocess.run(['git', 'lfs', 'ls-files'], 
                                  capture_output=True, text=True)
            if result.returncode == 0 and result.stdout.strip():
                lfs_files = result.stdout.strip().split('\n')
                print(f"‚úÖ Git LFS f√°jlok: {len(lfs_files)} db")
                return True
            else:
                print("‚ö†Ô∏è Nincsenek Git LFS f√°jlok")
                return False
        else:
            print("‚ùå Git LFS nem el√©rhet≈ë")
            return False
    except FileNotFoundError:
        print("‚ùå Git LFS nincs telep√≠tve (sudo apt install git-lfs)")
        return False

def check_directories():
    """K√∂nyvt√°r strukt√∫ra ellen≈ërz√©se"""
    print("\nüìÅ K√∂nyvt√°rak ellen≈ërz√©se:")
    
    required_dirs = ['models', 'audio_mp3', 'essentia-models']
    all_good = True
    
    for directory in required_dirs:
        if os.path.exists(directory) and os.path.isdir(directory):
            file_count = len([f for f in os.listdir(directory) 
                            if os.path.isfile(os.path.join(directory, f))])
            print(f"‚úÖ {directory}/: {file_count} f√°jl")
        else:
            print(f"‚ùå {directory}/: nem tal√°lhat√≥")
            all_good = False
    
    return all_good

def main():
    """F≈ë ellen≈ërz≈ë f√ºggv√©ny"""
    print("üîç ESSENTIA MUSIC ANALYZER - TELEP√çT√âS ELLEN≈êRZ√âS")
    print("=" * 60)
    
    checks = [
        ("Python verzi√≥", check_python_version),
        ("F√ºgg≈ës√©gek", check_imports),
        ("Modell f√°jlok", check_model_files),
        ("Git LFS", check_git_lfs),
        ("K√∂nyvt√°rak", check_directories)
    ]
    
    results = []
    
    for check_name, check_func in checks:
        try:
            result = check_func()
            results.append((check_name, result))
        except Exception as e:
            print(f"‚ùå {check_name}: Hiba - {e}")
            results.append((check_name, False))
    
    # √ñsszes√≠t√©s
    print("\n" + "=" * 60)
    print("üìä √ñSSZES√çT√âS:")
    print("=" * 60)
    
    passed = sum(1 for _, result in results if result)
    total = len(results)
    
    for check_name, result in results:
        status = "‚úÖ" if result else "‚ùå"
        print(f"{status} {check_name}")
    
    print(f"\nüèÜ EREDM√âNY: {passed}/{total} ellen≈ërz√©s sikeres")
    
    if passed == total:
        print("üéâ A rendszer teljesen m≈±k√∂d≈ëk√©pes!")
        print("\nüöÄ Futtat√°shoz:")
        print("   source essentia_env/bin/activate")
        print("   python3 linux_essentia_optimized.py")
    else:
        print("\n‚ö†Ô∏è Jav√≠t√°si javaslatok:")
        if not any(name == "Git LFS" and result for name, result in results):
            print("   - sudo apt install git-lfs && git lfs pull")
        if not any(name == "F√ºgg≈ës√©gek" and result for name, result in results):
            print("   - pip install -r requirements.txt")
        if not any(name == "Modell f√°jlok" and result for name, result in results):
            print("   - git lfs pull")
    
    return passed == total

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)